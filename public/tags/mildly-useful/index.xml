<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mildly Useful on Magic Broccoli</title>
    <link>https://magicbroccoli.de/tags/mildly-useful/</link>
    <description>Recent content in Mildly Useful on Magic Broccoli</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <managingEditor>mightyBroccoli (nico)</managingEditor>
    <webMaster>mightyBroccoli (nico)</webMaster>
    <copyright>All rights reserved.</copyright>
    <lastBuildDate>Mon, 03 Sep 2018 02:30:00 +0200</lastBuildDate>
    
        <atom:link href="https://magicbroccoli.de/tags/mildly-useful/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nextcloud Munin Plugin</title>
      <link>https://magicbroccoli.de/post/nextcloud-munin/</link>
      <pubDate>Mon, 03 Sep 2018 02:30:00 +0200</pubDate>
      <author>mightyBroccoli (nico)</author>
      <guid>https://magicbroccoli.de/post/nextcloud-munin/</guid>
      <description>

&lt;h1 id=&#34;basic-idea&#34;&gt;basic idea&lt;/h1&gt;

&lt;p&gt;For a longer period of time I was looking for a Munin plugin to monitor the activity, especially the user activity on my cloud instance. There are some plugins out there, but most of them depend on externally querying the database.&lt;br&gt;
With the &lt;a href=&#34;https://docs.nextcloud.com/server/13/developer_manual/core/externalapi.html&#34; target=&#34;_blank&#34;&gt;External API&lt;/a&gt; and the &lt;a href=&#34;https://github.com/nextcloud/serverinfo&#34; target=&#34;_blank&#34;&gt;server info dashboard&lt;/a&gt; Nextcloud itself presents an endpoint to gather data from. This way the database action is handled by the cloud and I can just grab the data from the endpoint.&lt;/p&gt;

&lt;h2 id=&#34;why-python&#34;&gt;why python?&lt;/h2&gt;

&lt;p&gt;I choose python to utilize the immensely strong &lt;a href=&#34;https://github.com/requests/requests&#34; target=&#34;_blank&#34;&gt;requests&lt;/a&gt; module. In addition to that no extra json dump was necessary to work with the data which made the data extraction really easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# init requests session with specific header and credentials
s = requests.Session()
s.auth = auth
s.headers.update({&#39;Accept&#39;: &#39;application/json&#39;})

# request data from api
r = s.get(URL)
api_response = r.json()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example &lt;code&gt;auth&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are passed as variables which were defined earlier in the plugin to specific environment variables. All together those 5 lines do the complete request and conversion to json action of the plugin.&lt;/p&gt;

&lt;h2 id=&#34;munin-config&#34;&gt;Munin config&lt;/h2&gt;

&lt;p&gt;On running the plugins for the first time Munin will correctly recognize the configuration, even if the URL and authentication information is not set up until that point.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;configuration&lt;/h3&gt;

&lt;p&gt;Both plugins need essentially the same configuration added to the the plugin-config &lt;code&gt;/etc/munin/plugin-config.d/munin-node&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[nextcloud_*]
url = https://URL.TO.YOUR.NEXTCLOUD.tld/ocs/v2.php/apps/serverinfo/api/v1/info
username = username
password = password or logintoken
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;results&#34;&gt;results&lt;/h2&gt;

&lt;p&gt;If all necessary configuration parameters are set the resulting graphs should look something like this.
&lt;br&gt;&lt;img src=&#34;https://magicbroccoli.de/images/posts/2018-09-03_nextcloud-munin/graph_share.png&#34; width=&#34;50%&#34;&gt;&lt;img src=&#34;https://magicbroccoli.de/images/posts/2018-09-03_nextcloud-munin/graph_user.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Github : &lt;a href=&#34;https://github.com/mightyBroccoli/nextcloud-munin-py&#34; target=&#34;_blank&#34;&gt;nextcloud-munin-py&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt Prosody Cert Hook</title>
      <link>https://magicbroccoli.de/post/letsencrypt-prosody-cert-hook/</link>
      <pubDate>Fri, 30 Mar 2018 13:37:00 +0200</pubDate>
      <author>mightyBroccoli (nico)</author>
      <guid>https://magicbroccoli.de/post/letsencrypt-prosody-cert-hook/</guid>
      <description>

&lt;h3 id=&#34;prosody-let-s-encrypt-certificates&#34;&gt;Prosody + Let&amp;rsquo;s Encrypt certificates&lt;/h3&gt;

&lt;p&gt;As of right now Prosody is not able to update a live certificate while running. For the complete update it is necessary to restart Prosody, which is inconvenient.&lt;br&gt;
With the &lt;a href=&#34;https://prosody.im/doc/console&#34; target=&#34;_blank&#34;&gt;telnet console&lt;/a&gt; however, it is possible to reload the config such that a changed certificate is updated correctly. The biggest problem lies in reloading all possible locations the &amp;ldquo;old&amp;rdquo; certificate is still active in. I use the Prosody Telnet console to invoke a reload, due to the fact that &lt;code&gt;prosodyctl reload&lt;/code&gt; is not actually reloading the modules just the config.&lt;br&gt;
For this matter I hacked together a little bash script, which together with the &lt;a href=&#34;https://certbot.eff.org/&#34; target=&#34;_blank&#34;&gt;Let&amp;rsquo;sEncrypt&amp;rsquo;s certbot&lt;/a&gt; and the default letsecrypt cli is used to import and update the Prosody certificate without a need to restart the instance.&lt;/p&gt;

&lt;h3 id=&#34;let-sencrypt-setup&#34;&gt;Let&amp;rsquo;sEncrypt Setup&lt;/h3&gt;

&lt;p&gt;To use this script in a fully automatic way some configuration is needed.
On install Let&amp;rsquo;sEncrypt creates the directory &lt;code&gt;renewal-hooks&lt;/code&gt;. Inside there are three sub folders which represent the time and/or occasion for invocation (&lt;a href=&#34;https://certbot.eff.org/docs/using.html#renewing-certificates&#34; target=&#34;_blank&#34;&gt;source&lt;/a&gt;). This script uses the deploy hook to only run when the certificate is actually renewed. As I am not checking the domain name after deployment it is needed to add another subdirectory to the deploy directory.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/etc/letsencrypt/renewal-hooks/
└── deploy
    └── example.de
        └── prosody.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;deploy-hook&#34;&gt;Deploy-Hook&lt;/h4&gt;

&lt;p&gt;In this example code the hook is placed inside the &lt;code&gt;example.de&lt;/code&gt; folder as &lt;code&gt;prosody.sh&lt;/code&gt;. The script first imports the defined list of domains from the Let&amp;rsquo;s Encrypt live directory. After this is finished reloading takes place. The import is done as described in the &lt;a href=&#34;https://prosody.im/doc/letsencrypt&#34; target=&#34;_blank&#34;&gt;Prosody Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;### Prosody Cert Import ###
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# active domains
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;domains&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.de&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# import the new certs
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; domain in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;domains[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
	prosodyctl --root cert import $domain /etc/letsencrypt/live
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# modules needing to be reloaded
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;modules&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s2s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c2s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tls&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# loop over commands
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; command in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;modules[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;module:reload([[&lt;/span&gt;$command&lt;span style=&#34;color:#e6db74&#34;&gt;]])&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config:reload()&amp;#34;&lt;/span&gt;
echo quit
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;| nc localhost &lt;span style=&#34;color:#ae81ff&#34;&gt;5582&lt;/span&gt; &amp;amp;&amp;gt;/dev/null

&lt;span style=&#34;color:#75715e&#34;&gt;# exit gracefully
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;let-sencrypt-renewal-config&#34;&gt;Let&amp;rsquo;sEncrypt Renewal config&lt;/h3&gt;

&lt;p&gt;At this time certbot would not run any deploy hook after renewing a certificate. The default configuration invokes &lt;code&gt;/bin/run-parts&lt;/code&gt; on the predefined folders &lt;code&gt;pre&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;deploy&lt;/code&gt;. To run the script on deployment it is needed to add the directory to the renew config file of your domain. For this example I choose to use example.de which would resolve to &lt;code&gt;/etc/letsencrypt/renewal/example.de.conf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;renewalparams&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
...
renew_hook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /bin/run-parts /etc/letsencrypt/renewal/example.de
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;todo&#34;&gt;TODO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Prosody archives the &amp;ldquo;old&amp;rdquo; certificates when importing a new one. After a while the directory is pretty cluttered.&lt;/li&gt;
&lt;li&gt;implement $RENEWED_DOMAINS test to deploy hook without the need to reconfigure&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Prosody housekeeping</title>
      <link>https://magicbroccoli.de/post/prosody-housekeeping/</link>
      <pubDate>Mon, 02 Oct 2017 13:30:00 +0200</pubDate>
      <author>mightyBroccoli (nico)</author>
      <guid>https://magicbroccoli.de/post/prosody-housekeeping/</guid>
      <description>

&lt;h1 id=&#34;grundidee&#34;&gt;Grundidee&lt;/h1&gt;

&lt;p&gt;Ich habe mich in den letzten paar Tagen damit beschäftigt Dinge rund um den Prosody Server zu automatisieren.
Daher möchte ich hier einfach mal meine Lösung einiger kleiner Probleme vorstellen.&lt;/p&gt;

&lt;h1 id=&#34;problem&#34;&gt;Problem&lt;/h1&gt;

&lt;p&gt;Das grundsätzliche Problem, welches so ziemlich alle Server mit offener Registrierung teilen, sind Zombie Accounts. Sprich Accounts die erstellt wurden, allerdings nie verwendet werden. Oder Accounts die erstellt wurden und irgendwann von ihrem Nutzer/in nicht mehr verwendet werden. Solche Accounts verursachen eine vermeidbare Last für das System.&lt;br&gt;
Die zweite größere Quelle liegt in einem Problem Prosodys Dateien oder Datenbank Einträge korrekt bzw. überhaupt zu löschen. Namentlich sind hier &lt;a href=&#34;https://modules.prosody.im/mod_http_upload.html&#34; target=&#34;_blank&#34;&gt;mod_http_upload&lt;/a&gt; und &lt;a href=&#34;https://modules.prosody.im/mod_mam.html&#34; target=&#34;_blank&#34;&gt;mod_mam&lt;/a&gt; zu nennen.
Vor allem bei dem Modul mam bestehen Probleme, da die Einträge eines jeden Users einzeln bearbeitet werden. Daher steigt die Bearbeitungszeit bei größeren Userzahlen enorm an.&lt;/p&gt;

&lt;h1 id=&#34;lösungsansatz&#34;&gt;Lösungsansatz&lt;/h1&gt;

&lt;p&gt;Als Lösungsansatz habe ich ein einfaches Skript geschrieben, das tägliche &amp;ldquo;housekeeping&amp;rdquo; Aufgaben für mich übernimmt.&lt;br&gt;
&lt;a href=&#34;https://thomas-leister.de/&#34; target=&#34;_blank&#34;&gt;Thomas Leister&lt;/a&gt; hat vor einiger Zeit einen sehr ähnlichen &lt;a href=&#34;https://thomas-leister.de/prosody-inaktive-accounts-loeschen&#34; target=&#34;_blank&#34;&gt;Lösungsansatz&lt;/a&gt; veröffentlicht, den ich in meinem Skript erweitert habe, um ihn vollständig zu automatisieren.&lt;br&gt;
Das im Folgenden beschriebene Skript steht auf &lt;a href=&#34;https://github.com/mightyBroccoli/prosody_housekeeping&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; zur Verfügung.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNUNG&lt;/strong&gt;: Das Skript verfügt über einen &lt;em&gt;configtest&lt;/em&gt;; durch das ausführen mit &lt;code&gt;--configtest&lt;/code&gt; oder &lt;code&gt;-t&lt;/code&gt; werden alle Filter angewendet, ohne das Einträge gelöscht werden. So ist es möglich anschaulich zu sehen was bei einem ausführen passiert wäre. Es ist äußerste Vorsicht geboten beim konfigurieren des Skripts, daher ist ein testen der Konfiguration sehr empfohlen.&lt;/p&gt;

&lt;h1 id=&#34;skript&#34;&gt;Skript&lt;/h1&gt;

&lt;p&gt;Das Skript arbeitet nacheinander alle diese Probleme ab und beseitigt diese Probleme in mehreren Schritten ohne das Usereingaben notwendig sind.&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;konfiguration&#34;&gt;Konfiguration&lt;/h2&gt;

&lt;p&gt;Für die Verwendung des Skriptes werden zwei Module benötigt. Diese sollten im Modul Verzeichnis von Prosody vorhanden sein.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://modules.prosody.im/mod_list_inactive.html&#34; target=&#34;_blank&#34;&gt;mod_list_inactive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://modules.prosody.im/mod_lastlog.html&#34; target=&#34;_blank&#34;&gt;mod_lastlog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mod_lastlog lässt sich einfach in die modules_enabled{} Sektion der Prosody Konfiguration eintragen. Für das Modul ist keine weitere Konfiguration notwendig.
Der einfachste Weg ist, das gesamte Mercurial Archiv der Community Module zu klonen und in der Prosody Konfiguration zu referenzieren. Eine Anleitung wie das geht findet sich in der Prosody &lt;a href=&#34;https://prosody.im/doc/installing_modules#prosody-modules&#34; target=&#34;_blank&#34;&gt;Dokumentation&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Nun sollte im Skript selbst, über die Variablen, eingestellt werden was für Zeiteinheiten gewünscht sind. Außerdem sollten eventuell abweichende Pfade auf die jeweiligen Systemverhältnisse angepasst werden.&lt;br&gt;
Der Folgende Abschnitt zeigt einen Ausschnitt aus dem Skript, welcher die Konfigurationsvariablen, die Filter sowie den &lt;code&gt;--configtest&lt;/code&gt; catch zeigt.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;###### CONFIGURATION ######
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# configuration variables
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;tmp_directory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/prosody/
junk_to_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$tmp_directory/accounts_to_delete.txt

&lt;span style=&#34;color:#75715e&#34;&gt;# maximum timeframe for accounts registered but not logged in
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# needs to be in the syntax 1day 2weeks 3months 4years
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;unused_accounts_timeframe&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;14days&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# maxium timeframe for accounts since last login
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;old_accounts_timeframe&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1year&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# maximum age of mod_mam messags stored in the database
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;enable_mam_clearing&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
&lt;span style=&#34;color:#75715e&#34;&gt;# needs to be in mysql syntax 1 DAY 2 MONTH 3 YEAR
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;mam_message_live&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2 MONTH&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# prosody mysql login credentials
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;prosody_db_user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prosody&amp;#34;&lt;/span&gt;
prosody_db_password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;super_secret-password1337&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# http upload path
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;http_upload_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/lib/prosody/http_upload&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# http upload lifetime in days
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;http_upload_expire&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31&amp;#34;&lt;/span&gt;

catch_configtest&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;# test your configuration first to see what would have be deleted
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--configtest&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		filter_unused_accounts
		filter_old_accounts
		filter_mam_messages --test

		cat $junk_to_delete
		exit
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;###### FILTER SECTION ######
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;filter_unused_accounts&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;# filter all registered but not logged in accounts older then $unused_accounts_timeframe
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	prosodyctl mod_list_inactive magicbroccoli.de &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$unused_accounts_timeframe&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; event | grep registered | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/registered//g&amp;#39;&lt;/span&gt; | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^/prosodyctl deluser /&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $junk_to_delete
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

filter_old_accounts&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;# filter all inactive accounts older then $old_accounts_timeframe
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	prosodyctl mod_list_inactive magicbroccoli.de &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$old_accounts_timeframe&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^/prosodyctl deluser /&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $junk_to_delete
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

filter_mam_messages&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;# only run this filter if $enable_mam_clearing is set to true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$enable_mam_clearing&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;# catch config test
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
			&lt;span style=&#34;color:#75715e&#34;&gt;# this is currently a workaround caused by the extrem slowness of prosodys own clearing mechanism
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;# filter all expired mod_mam messages from archive
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM prosody.prosodyarchive WHERE \`when\` &amp;lt; UNIX_TIMESTAMP(DATE_SUB(curdate(),INTERVAL &lt;/span&gt;$mam_message_live&lt;span style=&#34;color:#e6db74&#34;&gt;));&amp;#34;&lt;/span&gt; | mysql -u $prosody_db_user -p$prosody_db_password &amp;amp;&amp;gt;&amp;gt; $junk_to_delete
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;# this is currently a workaround caused by the extrem slowness of prosodys own clearing mechanism
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;# delete all expired mod_mam messages from archive
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DELETE FROM prosody.prosodyarchive WHERE \`when\` &amp;lt; UNIX_TIMESTAMP(DATE_SUB(curdate(),INTERVAL &lt;/span&gt;$mam_message_live&lt;span style=&#34;color:#e6db74&#34;&gt;));&amp;#34;&lt;/span&gt; | mysql -u $prosody_db_user -p$prosody_db_password
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

filter_expired_http_uploads&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;# currently a workaround as the mod_http_uploud is not removing the folder which holds the file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	find $http_upload_path/* -maxdepth &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -type d -mtime +$http_upload_expire | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^/rm -rf /&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $junk_to_delete
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XMPP over TLS Tutorial</title>
      <link>https://magicbroccoli.de/post/xmpp-over-tls-guide/</link>
      <pubDate>Sun, 06 Aug 2017 15:00:00 +0200</pubDate>
      <author>mightyBroccoli (nico)</author>
      <guid>https://magicbroccoli.de/post/xmpp-over-tls-guide/</guid>
      <description>

&lt;h2 id=&#34;how-to-setup-xep-0368&#34;&gt;How to setup XEP-0368&lt;/h2&gt;

&lt;h3 id=&#34;was-ist-xep-0368&#34;&gt;Was ist XEP-0368&lt;/h3&gt;

&lt;p&gt;Bei &lt;a href=&#34;https://xmpp.org/extensions/xep-0368.html&#34; target=&#34;_blank&#34;&gt;XEP-0368&lt;/a&gt; handelt es sich um ein Verfahren welches XMPP-Clients ermöglicht über SRV Einträge im DNS, alternative Verbindungsmöglichkeiten zu entdecken. Dies ist äußerst nützlich, falls die regulären Verbindungswege blockiert sind zb. durch Firewalls.&lt;/p&gt;

&lt;blockquote cite=&#34;https://xmpp.org/extensions/xep-0368.html&#34;&gt;XMPP Core specifies the use of xmpp-client/xmpp-server SRV records as the method of discovering how to connect to an XMPP server. This XEP extends that to include new xmpps-client/xmpps-server SRV records pointing to direct TLS ports and combine priorities and weights as if they were a single SRV record similar to RFC 6186. It also provides an easy way for clients to bypass restrictive firewalls that only allow HTTPS, for servers to host multiple protocols/services on a single port, and for servers and clients to take advantage of less round trips and existing direct TLS loadbalancers.&lt;/blockquote&gt;

&lt;h3 id=&#34;was-wird-benötigt&#34;&gt;Was wird benötigt?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Prosody Server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optional&lt;/strong&gt; gültiges SSL Zertifikat ( LetsEncrypt / oä )&lt;/li&gt;
&lt;li&gt;2 IPv4 Adressen ( &lt;strong&gt;Hinweis beachten&lt;/strong&gt; )&lt;/li&gt;
&lt;li&gt;iptables und iptables-persistent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optional&lt;/strong&gt; Webserver&lt;/li&gt;
&lt;li&gt;Kontrolle über eure DNS Zone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;em&gt;Hinweis&lt;/em&gt;: Notwendigkeit 2 IPv4 Adressen&lt;/span&gt;
Es werden 2 IP Adressen benötigt, wenn Ihre IP Adresse bereits auf Port 443 lauscht. Sprich eine &lt;strong&gt;https&lt;/strong&gt; Website via Apache2 / nginx gehostet wird. Da für diese Methode der Port verpflichtend benötigt wird. Ist dies nicht der Fall reicht eine einzelne IP Adresse vollkommen aus.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;1-dns-einstellungen&#34;&gt;1. DNS Einstellungen&lt;/h3&gt;

&lt;p&gt;Den Anfang machen die DNS Einstellungen, da die Veröffentlichung der neuen DNS Einstellungen bis zu 48 Stunden dauern kann.
Zusätzlich zu den &lt;a href=&#34;https://prosody.im/doc/dns&#34; target=&#34;_blank&#34;&gt;Standard SRV Einträgen&lt;/a&gt; wird ein weiterer &lt;code&gt;_xmpps-client._tcp&lt;/code&gt; Eintrag benötigt. Außerdem ein weiterer A Record für die gewünschte Subdomain.&lt;/p&gt;

&lt;p&gt;In diesem Beispiel ist die Domain &lt;code&gt;example.com&lt;/code&gt; und XMPP over TLS soll über die SubDomain &lt;code&gt;xmpps.example.com&lt;/code&gt; erreichbar sein.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-DNS&#34; data-lang=&#34;DNS&#34;&gt;# Standard Settings
_xmpp-client._tcp.example.com. 18000 IN SRV 0 5 5222 example.com.
_xmpp-server._tcp.example.com. 18000 IN SRV 0 5 5269 example.com.

# XMPP over TLS Settings
_xmpps-client._tcp.example.com. 18000 IN SRV 10 5 443 xmpps.example.com.

# A record
xmpps.example.com. 18000 IN A $zweite_ip_adresse&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;2-prosody-server-konfiguration&#34;&gt;2. Prosody Server Konfiguration&lt;/h3&gt;

&lt;p&gt;Für den Verbindungsaufbau muss in der Prosody Konfiguration &lt;em&gt;legacy_ssl_ports&lt;/em&gt; definiert werden, damit das &lt;code&gt;http&lt;/code&gt; Modul auch auf dem gewählten Port lauscht. Das Modul &lt;em&gt;mod_legacyauth&lt;/em&gt; wird hierfür allerdings nicht benötigt.
Ein Neustart des Prosody Services ist nach dem setzen dieser Einstellung zwingend &lt;strong&gt;erforderlich&lt;/strong&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- XEP-0368: SRV records for XMPP over TLS&lt;/span&gt;
legacy_ssl_ports &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;5223&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-ssl-zertifikat-optional&#34;&gt;3. SSL Zertifikat ( &lt;em&gt;optional&lt;/em&gt; )&lt;/h3&gt;

&lt;p&gt;Hier wäre der Zeitpunkt das bestehende Zertifikat für &lt;code&gt;example.com&lt;/code&gt; auf &lt;code&gt;xmpps.example.com&lt;/code&gt; auszuweiten, um keinen &lt;code&gt;common name error&lt;/code&gt; zu erzeugen. Dieses erweiterte Zertifikat ist dem Prosody zur Verfügung zu stellen. Die Ausstellung eines neuen LetEncrypt Zertifikats ist nach &lt;a href=&#34;#5-webserver&#34;&gt;Schritt 5: Webserver&lt;/a&gt; deutlich einfacher.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hinweis&lt;/em&gt; : Dieser Teil ist vollkommen optional. Die &lt;a href=&#34;https://prosody.im/doc/certificates&#34; target=&#34;_blank&#34;&gt;Prosody Dokumentation&lt;/a&gt; zeigt auf, dass kein Zertifikat notwendig wäre.
&lt;strong&gt;IMHO&lt;/strong&gt; Es macht das Gesamtbild einheitlicher, wenn auch an diesem Endpunkt ein gültiges SSL Zertifikat präsentiert wird.&lt;br&gt;
In Section &lt;a href=&#34;#5-webserver&#34;&gt;5. Webserver&lt;/a&gt; gehe ich darauf noch einmal genau ein.&lt;/p&gt;

&lt;h3 id=&#34;4-iptables-regeln&#34;&gt;4. iptables Regeln&lt;/h3&gt;

&lt;p&gt;Für das Umleiten der Pakete wird die PREROUTING und POSTROUTING Kette von &lt;code&gt;iptables&lt;/code&gt; verwendet. Dabei werden Pakete noch bevor sie überhaupt geroutet werden umgeleitet.
Dafür werden 2 Regeln verwendet um einen &lt;code&gt;malformed xml-error&lt;/code&gt; zu vermeiden.
Regel Nr. 1 leitet den gesamten Traffic der zweiten IP von Port 443, ohne Veränderung an Port 5223 der ersten IP weiter.&lt;/p&gt;

&lt;p&gt;Für die Antwort des Prosody Servers wird allerdings eine zweite Regel benötigt, die sich in der POSTROUTING Kette befindet. Diese stellt sicher, dass das Antwort-Paket wieder über Port 443 der zweiten IP Adresse den Server verlässt.&lt;br&gt;
&lt;em&gt;Sollte bei der Prosody Konfiguration ein anderer Port gewählt werden als der default Port, muss dieser natürlich in den iptables Regeln ausgetauscht werden.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In diesem Beispiel ist erste_ip, jene IP-Adresse auf der auch der httpd Server lauscht. zweite_ip bezeichnet somit die zweite Adresse speziell für XMPP over TLS.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# PREROUTING
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;iptables -t nat -A PREROUTING -d zweite_ip -p tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt; -j DNAT --to-destination erste_ip:5223

&lt;span style=&#34;color:#75715e&#34;&gt;# POSTROUTING
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;iptables -t nat -A POSTROUTING -p tcp -d  zweite_ip --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;5223&lt;/span&gt; -j SNAT --to-source erste_ip:5223&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Abschließend sollten diese Regeln mit &lt;code&gt;iptables-save&lt;/code&gt; gespeichert werden, damit diese bei einem reboot erneut angewendet werden.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iptables-save &amp;gt; /etc/iptables/rules.v4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-webserver&#34;&gt;5. Webserver&lt;/h3&gt;

&lt;p&gt;Die Konfiguration des Webserver ist grundsätzlich nicht notwendig, macht das testen der vorgenommenen Änderungen, sowie erzeugen bzw. erweitern bestehender Zertifikate allerdings bedeutend einfacher.&lt;br&gt;
Im Folgenden habe ich die simpelste Möglichkeit eins vHosts angenommen. Dabei ist als Beispiel immer example.de verwendet worden.&lt;/p&gt;

&lt;h5 id=&#34;nginx&#34;&gt;nginx&lt;/h5&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
	&lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;zweite_ip:80&lt;/span&gt;;
	&lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;xmpps.example.de&lt;/span&gt;;
	&lt;span style=&#34;color:#75715e&#34;&gt;#hier kann je nach wunsch eine weiterleitung stattfinden
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;https://example.de&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;# letsencrypt love
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/.well-known/acme-challenge/&lt;/span&gt; {
    	&lt;span style=&#34;color:#f92672&#34;&gt;default_type&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/plain&amp;#34;&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/.well-known/acme-challenge/&lt;/span&gt; {
    	&lt;span style=&#34;color:#f92672&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;;
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&#34;apache2&#34;&gt;apache2&lt;/h5&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-apache&#34; data-lang=&#34;apache&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;zweite_ip:80&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	ServerName xmpps.example.de

	&lt;span style=&#34;color:#75715e&#34;&gt;# hier kann je nach wunsch eine weiterleitung stattfinden&lt;/span&gt;
	Redirect / https://example.de;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sind diese Änderungen vorgenommen, ist es leicht möglich via LetsEncrypt ein Zertifikat für die SubDomain auszustellen. Zusätzlich dazu ist es nun möglich direkt zu testen ob XMPP over TLS funktioniert.&lt;/p&gt;

&lt;h2 id=&#34;abschluss&#34;&gt;Abschluss&lt;/h2&gt;

&lt;p&gt;Sollten alle diese Schritte erfolgreich abgeschlossen sein, ist es sehr leicht möglich zu testen ob alles so funktioniert wie es soll. Hierfür lässt sich &lt;code&gt;curl -i&lt;/code&gt; verwenden.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i https://xmpps.example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hinweis&lt;/strong&gt;: Falls es an diesem Endpunkt keine gültigen Zertifikate gibt, sollte hier der Befehl &lt;code&gt;curl -ik&lt;/code&gt; gewählt werden, um den TLS Error zu ignorieren.&lt;/p&gt;

&lt;p&gt;Als Ergebnis sollte ein &lt;em&gt;xml stream error&lt;/em&gt; zu sehen sein, &lt;strong&gt;ohne&lt;/strong&gt; Apache2 / nginx header.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stream:stream&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:stream=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://etherx.jabber.org/streams&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xml:lang=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;en&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jabber:client&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stream:error&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;not-well-formed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;urn:ietf:params:xml:ns:xmpp-streams&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stream:error&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stream:stream&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;Hinweis&lt;/strong&gt;:&lt;/span&gt; Für das Testen via curl sollte eine andere Maschine gewählt werden. Ausgeführt auf der gleichen Maschine durchlaufen die Pakete nicht die PREROUTING bzw. POSTROUTING Kette, daher wird die Verbindung abgelehnt.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TeamSpeak XMPP Push</title>
      <link>https://magicbroccoli.de/post/ts-xmpp-push/</link>
      <pubDate>Thu, 22 Jun 2017 14:15:25 +0200</pubDate>
      <author>mightyBroccoli (nico)</author>
      <guid>https://magicbroccoli.de/post/ts-xmpp-push/</guid>
      <description>

&lt;h2 id=&#34;idee&#34;&gt;Idee&lt;/h2&gt;

&lt;p&gt;Die Idee hinter diesem Skript ist, dass ein Admin/ Moderatoren nicht dauerhaft mit einem Server verbunden sein kann, um nach dem Rechten zu sehen.&lt;br&gt;
Dieses Problem versuche ich hiermit anzugehen. Dafür durchsucht dieses nach verschiedenen Regeln die Logfiles, gefundene Zeilen werden anschließend an definierte Kontakte per XMPP sendet.&lt;/p&gt;

&lt;h3 id=&#34;nutzen&#34;&gt;Nutzen&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IMHO&lt;/strong&gt; gibt es genügend Beispiele, in denen eine schnellstmögliche Benachrichtigung sehr praktisch ist. Viele Server unterstützen eine Reihe von &amp;ldquo;Automatischen Moderationen&amp;rdquo;, dennoch finden User Möglichkeiten diese zu behindern oder sogar zu umgehen. Durch eine kurze Benachrichtigung ist es dem Admin/ Moderator möglich zu überblicken, was betroffen ist und ob sofortiges handeln notwendig ist.&lt;br&gt;
Je nach Häufigkeit der Ausführung können die Benachrichtigung innerhalb von Sekunden gepushed werden.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---- Group change ----
--- added ---
2017-05-12 18:56:38.609377|INFO    |VirtualServer |1  |client (id:USER A) was added to servergroup &#39;SERVERGROUP NAME&#39;(id:SERVERGROUP ID) by client &#39;USERNAME&#39;(id:USER B)
2017-05-12 22:09:01.658969|INFO    |VirtualServer |1  |client (id:USER ID) was added to servergroup &#39;SERVERGROUP NAME&#39;(id:SERVERGROUP ID) by client &#39;USERNAME&#39;(id:USER ID)
---- Group change End ----
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filter&#34;&gt;Filter&lt;/h2&gt;

&lt;h4 id=&#34;server&#34;&gt;Server&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Accounting&lt;/li&gt;
&lt;li&gt;ServerMain&lt;/li&gt;
&lt;li&gt;Warning&lt;/li&gt;
&lt;li&gt;ERROR&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;user-spezifisch&#34;&gt;User spezifisch&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Complaint&lt;/li&gt;
&lt;li&gt;Kick&lt;/li&gt;
&lt;li&gt;Ban ( added and deleted )&lt;/li&gt;
&lt;li&gt;Group change&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;channel&#34;&gt;Channel&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;creation&lt;/li&gt;
&lt;li&gt;deletion&lt;/li&gt;
&lt;li&gt;changed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;p&gt;Das Projekt ist gehostet auf &lt;a href=&#34;https://github.com/mightyBroccoli/logwatch-scripts&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;. Dort ist auch ein Bereich für &lt;a href=&#34;https://github.com/mightyBroccoli/logwatch-scripts/issues&#34; target=&#34;_blank&#34;&gt;Github - Issues&lt;/a&gt;, falls Probleme auftreten oder Verbesserungsvorschläge bestehen.&lt;/p&gt;

&lt;h2 id=&#34;debian-9&#34;&gt;Debian 9&lt;/h2&gt;

&lt;p&gt;Leider besteht mit Debian Stretch ein Problem mit perl wodurch &lt;em&gt;sendxmpp&lt;/em&gt;, das xmpp cli Modul des Skripts nicht mehr funktioniert. Leider kann ich da im Moment erst mal nichts machen, aber ich repariere das Skript für Debian Stretch, sobald es möglich ist.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Update : 28.07.2017 Debian 9 Perl5 Problematik
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Use of uninitialized value in numeric eq &lt;span style=&#34;color:#f92672&#34;&gt;(==)&lt;/span&gt; at /usr/share/perl5/XML/Stream.pm line &lt;span style=&#34;color:#ae81ff&#34;&gt;631&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Ich hab mit etwas debugging herausgefunden, welche Zeilen geändert werden müssen, um perl-xmlstream wieder zu fixxen.
Die Datei &lt;code&gt;/usr/share/perl5/XML/Stream.pm&lt;/code&gt; müsste geändert werden. (Pfad kann abweichen je nach OS)
Mit nano lässt sich bequem nach der Zeile suchen, mit Shift + W. Danach ändert man Zeile 631.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{SIDS}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{default}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{ssl_ca_path} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
zu
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{SIDS}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{default}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{ssl_ca_path} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/etc/ssl/certs&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Nach dieser Änderung hat sich das Problem eingestellt und sendxmpp funktionierte wieder genauso tadellos wie zuvor.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>